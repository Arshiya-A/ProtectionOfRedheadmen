@page "/donate"
@using Microsoft.JSInterop.Implementation
@using global::Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<Donate> Logger

<div class="row">
    <div class="text-center input-section">

        <label class="text-white display-6 fw-normal">Value :</label>
        <br>

        <div class="input-group mb-3">
            <span class="input-group-text bg-dark text-white">$</span>
            <span class="input-group-text bg-dark text-white">0.00</span>
            <input @bind="@Amount" type="number" class="form-control bg-dark text-white" min="1"
                aria-label="Dollar amount (with dot and two decimal places)">
        </div>

        <label class="text-white display-6 fw-normal">Name(Optional) :</label>
        <br>

        <div class="input-group mb-3">

            <input @bind="@Name" type="text" class="form-control bg-dark text-white"
                aria-label="Dollar amount (with dot and two decimal places)">
        </div>


        <input @bind="@IsShowInDonorsList" class="form-check-input" type="checkbox" id="flexCheckDefault">
        <label class="form-check-label" for="flexCheckDefault">
            <span class="text-white">show in donations list</span>
        </label>
        <br>
        <button class="btn btn-primary btn-lg m-3" @onclick="Pay">Donate</button>

        <p class="text-white fw-medium display-6 m-2 mb-5">
            with a donation , you protect redheads men<br>
            if "show in donations list" allowed , you donation with name is show in donation list
        </p>
    </div>
</div>

@code {

    [Inject]
    public IJSRuntime Js { get; set; }
    private IJSObjectReference _jsModule;

    public string Name { get; set; } = "Anonymous";
    public int Amount { get; set; } = 1;
    public bool IsShowInDonorsList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _jsModule = await Js.InvokeAsync<IJSObjectReference>("import", "./js/site.js");
    }

    public async Task Pay()
    {

        var donor = new Donor() { Name = this.Name, Value = Amount.ToString(), IsShowInDonorsList = this.IsShowInDonorsList };
        var result = await Http.PostAsJsonAsync<Donor>("api/Donor/AddDonor", donor);

        if (result.StatusCode == System.Net.HttpStatusCode.OK && Amount > 0)
        {
            await Js.InvokeVoidAsync("alert", "Thank you for donate :)");
            Navigation.NavigateTo("creator");
        }
        else
        {
            await Js.InvokeVoidAsync("alert", "Donate is not successfully");
            Navigation.NavigateTo("facts");
        }
    }




}
